* BUG: .. (in target paths, etc) from project root should be an error,
  not equal project root

* Have the slavesFor* function[s] return what it did, rather than a simple list,
  the reasons, path, and whether/which target was found for each.

* "-k" should print errors ASAP and not at the end

* "-C" should always generate the file at the root

* scratch_problem_wip:
  * No longer need to track what's "safe to delete" (no deletions, yay!)
  * So now only need the output effect for determining scratch files:
  * Add  (O_CREATE|O_EXCL <-> !O_CREAT&!O_EXCL)  open loop, guaranteeing
  * No uncertainty about whether creation happened should be left anywhere, remove the MayCreate constructor
  * Can safely know for sure whether output is created. Need to keep the FIRST output addition!
  * Allow illegal output only if it was CREATED and now does not exist

  * When first adding an unspecified output, add it to ban list that
    all fsAccess's are checked against to cause failure of commands
    that access it

    * OPTIONALLY: When calling verifyTargetOutputs (in build context,
      not replay context) can remove the ban list

* Use FUSE!
  * dlopen isn't correct
  * open(dir)+failed-read-as-file depends on directory, when it doesn't depend on it

* Show in "status lines" what targets are actively-building/passively-waiting, with times spent on each?
* "file changed during build!" then causes output leakage not detected as outputs by buildsome!

* Must verify nobody ever writes to the Makefile or any of the included makefiles?

* Add Exception type wrapper for all buildsome exceptions that has a
  coloredText method: Color.Scheme -> ColorText.  "Show" should be the
  default Show.

* .pyc doesn't properly get auto-deleted.  Remember generator of .pyc, associate it with a command

* Phonies should not be included in directory listing

* Added partial support for out effect for undelayed operations, in C side.
  Add the matching support in Haskell side,
  then finish adding the support to all the OUT_PATH notifiers in the C side.

* Some operations succeed iff they create. Set CREATED on output paths
  Some operations never create. Set NOT_CREATED on output paths
  Some operations succeed iff they truncate. Losing the file is no big deal in that case (content was lost anyway). Set CREATED
  Some operations may or may not create, depending on the file status, which cannot be tested atomically, set UNKNOWN

* O_CREAT creates even for read-only files!

* everything waits rather than project-paths only -- 10% slower elfs build.
  worth it? Can check if output files exist...

---------
* Added partial support for out effect for undelayed operations, in C side.
  Add the matching support in Haskell side,
  then finish adding the support to all the OUT_PATH notifiers in the C side.

* Some operations succeed iff they create. Set CREATED on output paths
  Some operations never create. Set NOT_CREATED on output paths
  Some operations succeed iff they truncate. Losing the file is no big deal in that case (content was lost anyway). Set CREATED
  Some operations may or may not create, depending on the file status, which cannot be tested atomically, set UNKNOWN

* O_CREAT creates even for read-only files!

* everything waits rather than project-paths only -- 10% slower elfs build.
  worth it? Can check if output files exist...

-----------
* Outputs:

  * fs_override: send whether output actually happened (if not, consider as input mode only)
                  and whether file existed (false is the only state we know how to revert to)

  * UNDELAYED:
    if already encountered in this runCmd or output did not happen, not a new output
    new output (file existed) -> illegal output, warn about potential leaked effect on file, errorize

  * DELAYED:
    if already encountered in this runCmd or output did not happen, not a new output
    new output (file exists), throw an exception, which prevents sendGo which prevents output to that file, errorize

  * End of build is only reached if all disallowed outputs were to non-existing files, so we can delete them

* ReadWriteMode should generate a full-input, not a mode-only input
  for that file (this shouldn't affect anything, though)

* Ban access to unspecified empty-file outputs by other
  processes. This need not last beyond current session
  * O_RDWR should be considered both input and output
  * banning is of inputs only

* Check error parsing with netbeans (Entering directory + other errors)

* Verify that the mtime of all files does not change during run, not just during single command

* Better prints:

  * Reason to be ColorText
  * Replace ByteString human strings with Text? (e.g: Inside ColorText)

  * Print the need of each dependency exactly once (hints and then delayed inputs)

    * Can't print when "waitForSlaves" because that's after the thread
      was spawned (and started printing)

    * Difficult to print when spawning the slaves because that's
      nested deep in code

  * Singlethreaded prints are still bad when paused cmd switches to another cmd

  * Multithreaded commands will have multithreaded (confusing) use of
  the printer in handleInput/handleDelayedInput.  Need to have
  callbacks for create connection that fork the printer, and hand
  those over to handleInput/handleDelayedInput

* Performance:

  * Empty run
    * What's slow here?  98% of time spent in futex calls?!

  * Real run
    * C side should get list of delay-requiring inputs (patterns and normal files)
      * Via /tmp file?
      * Only delay those?

* local "clean" support

* Bugs:
  * Wrong FS input model:
    * When file is symlink, everything except lstat/readlink need to
      have an input dependency on the link content AND the file behind
      it

    * Only report *successful* outputs? Or perhaps report as inputs,
      output operations that failed due to FS state?

* C-side:

  * C-side can be given allowed outputs rules and fail anything else

  * C-side can be given buildable outputs and not round-trip for other inputs

  * C side failures should send fail messages to server, which is the
    only way to fail the job reliably

* Nice to haves:
  * keep-going needs to avoid dying on first exception from slaves created

  * Associate allowedUnspecifiedOutputs with targets somehow? generated
    .pyc currently not associated with anything, cannot know when to
    clean it

  * Add an age to keys, and delete old ones?

  * Running "as root" is another input to the build cmd, so add "is_root" to the cmd hash?
