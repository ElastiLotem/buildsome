* mtime cache:
  * mtime cache: Add path->(buildId, mtime, c.hash) cache to k/v store

  * When looking up a path in the mtime cache, if the buildId matches
    the current one, then the mtime must also match the current
    one. Also update the mtime cache if needed

* Performance is kind of crap:

  orig:             4.38
  cside canon:      3.55
  cside filter:     2.89
  Undelayed inputs: 2.391

  ----------

  perf still sucks:

  * Convert to bytestrings everywhere?
    The db.with is 8% of runtime! Probably writing a large string of all the file paths :(

* Failures should be cached in execution log just like successes?

* Bugs:
  * Need to ban undeclared outputs from being inputs to anyone else
    while cmd ongoing, delete them after cmd

    * Need C side to verify output files do not exist before-hand to
      avoid covert channels that are then unlinked
      * Recording only non-output inputs is weird, what if these
        outputs come later? Need to do the filtering of such input
        paths at the end

  * Wrong FS input model:
    * mode-only-inputs, (rely on mode only)
      content-only-inputs (rely on content + dirchildren but not on the stat),
      full-inputs (rely on stat + content + dirchildren)

    * When file is symlink, everything except lstat/readlink need to
      have an input dependency on the link content AND the file behind
      it

    * Only report *successful* outputs? Or perhaps report as inputs,
      output operations that failed due to FS state?

* Running "as root" is another input to the build cmd, so add "is_root" to the cmd hash?

* C-side can be given allowed outputs rules and fail anything else

* C-side can be given buildable outputs and not round-trip for other inputs

* Use mtime cache to see that outputs already match the execution log too

* Associate allowedUnspecifiedOutputs with targets somehow?

* Add an age to keys, and delete old ones?

* C side failures should send fail messages to server, which is the
  only way to fail the job reliably
