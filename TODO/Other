* Outputs:

  * fs_override: send whether output actually happened (if not, consider as input mode only)
                  and whether file existed (false is the only state we know how to revert to)

  * UNDELAYED:
    if already encountered in this runCmd or output did not happen, not a new output
    new output (file existed) -> illegal output, warn about potential leaked effect on file, errorize

  * DELAYED:
    if already encountered in this runCmd or output did not happen, not a new output
    new output (file exists), throw an exception, which prevents sendGo which prevents output to that file, errorize

  * End of build is only reached if all disallowed outputs were to non-existing files, so we can delete them

* ReadWriteMode should generate a full-input, not a mode-only input
  for that file (this shouldn't affect anything, though)

* Ban access to unspecified empty-file outputs by other
  processes. This need not last beyond current session
  * O_RDWR should be considered both input and output
  * banning is of inputs only

* Check error parsing with netbeans (Entering directory + other errors)

* Verify that the mtime of all files does not change during run, not just during single command

* Better prints:

  * Reason to be ColorText
  * Replace ByteString human strings with Text? (e.g: Inside ColorText)

  * Print the need of each dependency exactly once (hints and then delayed inputs)

    * Can't print when "waitForSlaves" because that's after the thread
      was spawned (and started printing)

    * Difficult to print when spawning the slaves because that's
      nested deep in code

  * Singlethreaded prints are still bad when paused cmd switches to another cmd

  * Multithreaded commands will have multithreaded (confusing) use of
  the printer in handleInput/handleDelayedInput.  Need to have
  callbacks for create connection that fork the printer, and hand
  those over to handleInput/handleDelayedInput

* Performance:

  * Empty run
    * What's slow here?  98% of time spent in futex calls?!

  * Real run
    * C side should get list of delay-requiring inputs (patterns and normal files)
      * Via /tmp file?
      * Only delay those?

* local "clean" support

* Bugs:
  * Wrong FS input model:
    * When file is symlink, everything except lstat/readlink need to
      have an input dependency on the link content AND the file behind
      it

    * Only report *successful* outputs? Or perhaps report as inputs,
      output operations that failed due to FS state?

* C-side:

  * C-side can be given allowed outputs rules and fail anything else

  * C-side can be given buildable outputs and not round-trip for other inputs

  * C side failures should send fail messages to server, which is the
    only way to fail the job reliably

* Nice to haves:
  * keep-going needs to avoid dying on first exception from slaves created

  * Associate allowedUnspecifiedOutputs with targets somehow? generated
    .pyc currently not associated with anything, cannot know when to
    clean it

  * Add an age to keys, and delete old ones?

  * Running "as root" is another input to the build cmd, so add "is_root" to the cmd hash?
