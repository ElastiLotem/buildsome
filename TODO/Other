* Check error parsing with netbeans (Entering directory + other errors)

* Better prints:

  * Reason to be ColorText
  * Replace ByteString human strings with Text? (e.g: Inside ColorText)

  * Print the need of each dependency exactly once (hints and then delayed inputs)

    * Can't print when "waitForSlaves" because that's after the thread
      was spawned (and started printing)

    * Difficult to print when spawning the slaves because that's
      nested deep in code

  * Singlethreaded prints are still bad when paused cmd switches to another cmd

  * Multithreaded commands will have multithreaded (confusing) use of
  the printer in handleInput/handleDelayedInput.  Need to have
  callbacks for create connection that fork the printer, and hand
  those over to handleInput/handleDelayedInput

* Verify that the mtime of all files does not change during run, not just during single command

* Performance:

  * Empty run
    * What's slow here?  98% of time spent in futex calls?!

  * Real run
    * C side should get list of delay-requiring inputs (patterns and normal files)
      * Via /tmp file?
      * Only delay those?

* local "clean" support

* Should failures be cached in execution log like successes? Thus avoid voodoo successes, and persist failures properly?

* Bugs:
  * Need to ban undeclared outputs from being inputs to anyone else
    while cmd ongoing, delete them after cmd

    * Need C side to verify output files do not exist before-hand to
      avoid covert channels that are then unlinked
      * Recording only non-output inputs is weird, what if these
        outputs come later? Need to do the filtering of such input
        paths at the end

  * Wrong FS input model:
    * mode-only-inputs, (rely on mode only)
      content-only-inputs (rely on content + dirchildren but not on the stat),
      full-inputs (rely on stat + content + dirchildren)

    * When file is symlink, everything except lstat/readlink need to
      have an input dependency on the link content AND the file behind
      it

    * Only report *successful* outputs? Or perhaps report as inputs,
      output operations that failed due to FS state?

* C-side:

  * C-side can be given allowed outputs rules and fail anything else

  * C-side can be given buildable outputs and not round-trip for other inputs

  * C side failures should send fail messages to server, which is the
    only way to fail the job reliably

* Nice to haves:
  * Associate allowedUnspecifiedOutputs with targets somehow? generated
    .pyc currently not associated with anything, cannot know when to
    clean it

  * Add an age to keys, and delete old ones?

  * Running "as root" is another input to the build cmd, so add "is_root" to the cmd hash?
