* opendir in execution log needs to verify content or content hash of file list?
  * currently it doesn't rerun opendir

* C-side can be given allowed outputs rules and fail anything else
* C-side can be given buildable outputs and not round-trip for other inputs

* Use mtime cache to see that outputs already match the execution log too

* Local round-tripping on a TRIE is not a problem, so can start with a local build cache

  * data Trie t = Final Output | Branch (InputPath, Map InputContent t)
    type Root t = Map CmdLine t
    Root [TrieId]

  * Keys are CmdLines, mapping to lists of TrieIds keys

* TRIE PROBLEM:

  * Assuming we have determinism over input access, a simple TRIE (starting with the cmdline) will work

  * This assumption may be broken with threads/randomness for non-deterministic input access

  * Option A: Ban non-determinism, disallow programs that do not read the same inputs given the same FS state

    * Will probably ban noone!

  * Option B: Have the TRIE allow "non-deterministic forks" that then need to be followed by everyone (expensively!)
    i.e:

    simple trie:

    cmds(X) -> A(a1) -> B(b1) -> OUT(o1)
                (a2) -> B(b1) -> OUT(o2)
                (a2) -> B(b2) -> C(c1) -> OUT(o3)

    with forks:

    cmds(X) -> [A(a1)  -> [B(b1) -> [OUT(o1)]]
                 (a2)  -> [B(b1) -> [OUT(o2)]]
                 (a2)  -> [B(b2) -> [C(c1) -> [OUT(o3)]]]]

    with forks, for case where C file may or may not be read, non-deterministically:

    cmds(X) -> [A(a1)  -> [B(b1) -> [OUT(o1)]]
                 (a2)  -> [B(b1) -> [OUT(o2)]]
                 (a2)  -> [B(b2) -> [C(c1) -> [OUT(o3)]
                                    ,OUT(o3)]]]

    with forks, for case where order of reading A and B is non-deterministic (a1 read first, a2 read second both times):

    cmds(X) -> [A(a1)  -> [B(b1) -> [OUT(o1)]]
               ,B(b1)  -> [A(a2) -> [OUT(o2)]]
                 (b2)  -> [A(a2) -> [C(c1) -> [OUT(o3)]]]]

    data Trie = Final Output | Branch (InputPath, Map InputContent [Trie])
    type Root = Map CmdLine [Trie]

    * This simply describes a "story" of input access and which output it lead to

    * Adding a story is easy (merge with existing sub-trie if match,
      open a new input content branch if only content differs, open a
      new input file path if different input is accessed [warn about
      it?])

    * Matching a story consists of looping over all input paths in
      every sub-trie, and branching on the right content for each
      input path.

    * This will lead to info duplication (of metadata), but should be
      rare and relatively cheap, so who cares?

    * Walking the trie would require many round-trips...

-----------------

* H(x) = hash (canonicalized x)
* FullPath -> (MTime, ContentHash)
* H(CmdLines) ->
  ( inputs: [(FullPath, ContentHash)]
  , outputs: [(FullPath, ContentHash)] -- *actual* outputs
  )

* Add an age to keys, and delete old ones?

* In every rule, whether we got actual outputs from cache or build,
  need to verify *actual* outputs are in the specification and warn
  about specification outputs that are unused

----------------------

* Switch to parsec for better error msgs and for "include" support (transformer over IO)

----------------------

* Need to have the semaphore wait scheduler prefer waiters that are
  being waited for by many dependents, over waiters that just want to
  spawn new commands.  i.e: Prefer to finish stuff than start stuff

  * There are only 2 interesting priorities: Normal (needed by hints),
    FSHook (needed by a memory-consuming process). We could have more
    fine grained priorities by measuring how much resources are held
    in memory.

----------------------

* Make sure /tmp and .pyc files aren't covert channels? /tmp files can
  be cleaned after every build or per-cmd sandboxed.  .pyc files are
  difficult to guarantee!